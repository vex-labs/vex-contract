# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install sccache
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-dist-v0.9.1-x86_64-unknown-linux-musl.tar.gz | tar xz
          mv sccache-v0.4.0-x86_64-unknown-linux-musl/sccache ~/.cargo/bin/

      - name: Configure sccache as RUSTC_WRAPPER
        run: |
          echo "RUSTC_WRAPPER=$(which sccache)" >> $GITHUB_ENV
          export RUSTC_WRAPPER=$(which sccache)

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.2

      - name: Run unit tests
        run: cargo test --lib --release
